name: Update dbdiagram.txt

on:
  pull_request:
    paths:
      - go/users/db/migrations/*.up.sql

jobs:
  update-dbdiagram:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install sqlparse

      - name: Update dbdiagram.txt
        run: |
          # Extract table name and columns from the SQL file
          sql_file=$(find go/users/db/migrations -name "*.up.sql" -print -quit)
          table_name=$(grep -oP 'CREATE TABLE IF NOT EXISTS \K\w+' "$sql_file")
          columns=$(python -c "
          
          with open('$sql_file') as f:
              file_length = sum(1 for line in open('$sql_file'))
              columns = []
              for i, line in enumerate(f):
                  if i == 0 or i == file_length - 1:
                      continue
                  
                  split_line = line.strip().split(' ', 2)
                  column_name = split_line[0]
                  column_type = split_line[1]
                  if len(split_line) == 3:
                      constraints = split_line[2]
                  else:
                      constraints = ''
                  columns.append((column_name, column_type, constraints))

          for column in columns:
              print(column[0], column[1], column[2])

          # import sqlparse
          # from sqlparse.sql import Identifier, IdentifierList

          # with open('$sql_file') as f:
          #     sql = f.read()
          #     parsed = sqlparse.parse(sql)
          #     statement = parsed[0]
          #     for token in statement.tokens:
          #         if isinstance(token, IdentifierList):
          #             identifiers = token.get_identifiers()
          #             for identifier in identifiers:
          #                 print(identifier.get_name(), end=' ')
          #                 for child in identifier.tokens:
          #                     if isinstance(child, Identifier):
          #                         print(child.get_real_name(), end=' ')
          #                     else:
          #                         print(child, end=' ')
          #                 print()
          ")

          # Create the table definition for dbdiagram.txt
          echo $columns
          dbdiagram_content="TABLE $table_name {\n"
          while read -r line; do
            column_name=$(echo $line | awk '{print $1}')
            column_type=$(echo $line | awk '{print $2}')
            constraints=$(echo $line | cut -d' ' -f 3-)
            dbdiagram_content+="  $column_name $column_type"
            if [[ ! -z "$constraints" ]]; then
              dbdiagram_content+=" [$constraints]"
            fi
            dbdiagram_content+="\n"
          done <<< "$columns"
          dbdiagram_content+="}"

          # Append the new table definition to dbdiagram.txt
          echo -e "\n$dbdiagram_content" >> go/users/db/dbdiagram/new_dbdiagram.txt

          cat go/users/db/dbdiagram/new_dbdiagram.txt
